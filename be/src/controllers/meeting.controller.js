import Meeting from "../models/meeting.model.js";
import crypto from "crypto";
import { sendMail } from "../services/emailService.js";

// T·∫°o cu·ªôc h·ªçp v√† g·ª≠i mail (ch·ªâ g·ª≠i 1 l·∫ßn khi t·∫°o)
export const createMeeting = async (req, res) => {
  try {
    const { title, candidateId, jobId, scheduledAt, participantEmails } = req.body;

    if (!title || !candidateId || !jobId || !scheduledAt) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    const recruiterId = req.id;
    const roomName = `viejob-${crypto.randomBytes(6).toString("hex")}`;

    // T·∫°o meeting
    let meeting = await Meeting.create({
      title,
      recruiter: recruiterId,
      candidate: candidateId,
      job: jobId,
      roomName,
      scheduledAt,
      participantEmails: participantEmails || [],
      mailSent: false, // ƒê√°nh d·∫•u ch∆∞a g·ª≠i mail
    });

    // Populate recruiter, candidate, job, recruiter.profile.company, job.company
    meeting = await Meeting.findById(meeting._id)
      .populate([
        {
          path: "recruiter",
          select: "fullname email profile.profilePhoto profile.company",
          populate: {
            path: "profile.company",
            select: "name logo"
          }
        },
        {
          path: "candidate",
          select: "fullname email profile.profilePhoto"
        },
        {
          path: "job",
          select: "title company",
          populate: {
            path: "company",
            select: "name logo"
          }
        }
      ]);

    // N·∫øu thi·∫øu th√¥ng tin, tr·∫£ l·ªói
    if (!meeting || !meeting.candidate || !meeting.job || !meeting.recruiter) {
      return res.status(400).json({ message: "Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ g·ª≠i mail" });
    }

    // L·∫•y th√¥ng tin c√¥ng ty t·ª´ recruiter ho·∫∑c t·ª´ job
    const company =
      meeting.recruiter?.profile?.company ||
      meeting.job?.company ||
      null;
    const companyName = company?.name || "VieJobs";
    const companyLogo = company?.logo || "";

    // G·ª≠i mail duy nh·∫•t 1 l·∫ßn khi t·∫°o
    if (!meeting.mailSent) {
      const candidateEmail = meeting.candidate.email;
      const htmlForCandidate = `
        <div style="font-family: Arial, sans-serif;">
          <div style="margin-bottom:16px;">
            ${companyLogo ? `<img src="${companyLogo}" alt="logo" style="height:48px;object-fit:contain;border-radius:8px;" />` : ""}
          </div>
          <p>Xin ch√†o ${meeting.candidate.fullname},</p>
          <p>B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi tham gia bu·ªïi ph·ªèng v·∫•n cho v·ªã tr√≠ <b>${meeting.job.title}</b> t·∫°i <b>${companyName}</b>.</p>
          <p><b>Th·ªùi gian:</b> ${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</p>
          <p><b>Ph√≤ng h·ªçp:</b> <a href="https://meet.jit.si/${meeting.roomName}" target="_blank">Tham gia ph√≤ng</a></p>
          <p>Tr√¢n tr·ªçng,<br/>${meeting.recruiter.fullname} (${companyName})</p>
        </div>
      `;

      await sendMail({
        to: candidateEmail,
        subject: `üéâ L·ªùi m·ªùi ph·ªèng v·∫•n t·ª´ ${companyName} qua VieJobs`,
        html: htmlForCandidate,
      });

      // G·ª≠i mail cho c√°c email ƒë∆∞·ª£c m·ªùi th√™m (kh√°c ·ª©ng vi√™n)
      const uniqueExtraEmails = (participantEmails || []).filter(
        (email) => email && email !== candidateEmail
      );

      for (const email of uniqueExtraEmails) {
        const htmlForParticipant = `
          <div style="font-family: Arial, sans-serif;">
            ${companyLogo ? `<img src="${companyLogo}" alt="logo" style="height:48px;object-fit:contain;border-radius:8px;" />` : ""}
            <p>B·∫°n ƒë∆∞·ª£c m·ªùi tham gia cu·ªôc h·ªçp/ph·ªèng v·∫•n: <b>${meeting.title}</b> cho v·ªã tr√≠ <b>${meeting.job.title}</b> t·∫°i <b>${companyName}</b>.</p>
            <p>Th·ªùi gian: <b>${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</b></p>
            <p>Ph√≤ng h·ªçp tr·ª±c tuy·∫øn: <a href="https://meet.jit.si/${meeting.roomName}">https://meet.jit.si/${meeting.roomName}</a></p>
            <p>Tr√¢n tr·ªçng,<br/>VieJobs</p>
          </div>
        `;
        await sendMail({
          to: email,
          subject: `[VieJobs] M·ªùi tham gia cu·ªôc h·ªçp: ${meeting.title} (${companyName})`,
          html: htmlForParticipant,
        });
      }

      meeting.mailSent = true;
      await meeting.save();
    }

    res.status(201).json({ meeting });
  } catch (err) {
    res.status(500).json({ message: "T·∫°o meeting th·∫•t b·∫°i", error: err.message });
  }
};

// L·∫•y danh s√°ch cu·ªôc h·ªçp c·ªßa user (l·∫•y ƒë·ªß th√¥ng tin recruiter, candidate, job)
export const getMeetings = async (req, res) => {
  try {
    const userId = req.id;
    const meetings = await Meeting.find({
      $or: [{ recruiter: userId }, { candidate: userId }],
    })
      .populate("recruiter", "fullname email profile.profilePhoto")
      .populate("candidate", "fullname email profile.profilePhoto")
      .populate("job", "title description requirements salary experienceLevel benefits location jobType position company status approval approvalNote category created_by applications createdAt updatedAt");

    res.json({ meetings });
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch meeting", error: err.message });
  }
};

// L·∫•y 1 meeting c·ª• th·ªÉ (l·∫•y ƒë·ªß th√¥ng tin recruiter, candidate, job)
export const getMeetingById = async (req, res) => {
  try {
    const meeting = await Meeting.findById(req.params.id)
      .populate("recruiter", "fullname email profile.profilePhoto")
      .populate("candidate", "fullname email profile.profilePhoto")
      .populate("job", "title description requirements salary experienceLevel benefits location jobType position company status approval approvalNote category created_by applications createdAt updatedAt");

    if (!meeting) {
      return res.status(404).json({ message: "Meeting kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ meeting });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y meeting", error: err.message });
  }
};

// C·∫≠p nh·∫≠t cu·ªôc h·ªçp, g·ª≠i l·∫°i mail khi c·∫≠p nh·∫≠t th√¥ng tin
export const updateMeeting = async (req, res) => {
  try {
    let meeting = await Meeting.findById(req.params.id)
      .populate("recruiter", "fullname email profile.profilePhoto")
      .populate("candidate", "fullname email profile.profilePhoto")
      .populate("job", "title");

    if (!meeting) {
      return res.status(404).json({ message: "Meeting kh√¥ng t·ªìn t·∫°i" });
    }

    // Ch·ªâ recruiter t·∫°o meeting m·ªõi ƒë∆∞·ª£c s·ª≠a
    if (meeting.recruiter._id.toString() !== req.id) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn s·ª≠a meeting n√†y" });
    }

    const { title, scheduledAt } = req.body;
    if (title) meeting.title = title;
    if (scheduledAt) meeting.scheduledAt = scheduledAt;

    await meeting.save();

    // G·ª≠i l·∫°i mail th√¥ng b√°o c·∫≠p nh·∫≠t cho candidate v√† participantEmails
    const candidateEmail = meeting.candidate.email;
    const htmlForCandidate = `
      <p>Xin ch√†o ${meeting.candidate.fullname},</p>
      <p>Th√¥ng tin bu·ªïi ph·ªèng v·∫•n cho v·ªã tr√≠ <b>${meeting.job.title}</b> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.</p>
      <p><b>Th·ªùi gian m·ªõi:</b> ${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</p>
      <p><b>Ph√≤ng h·ªçp:</b> <a href="https://meet.jit.si/${meeting.roomName}" target="_blank">Tham gia ph√≤ng</a></p>
      <p>Tr√¢n tr·ªçng,<br/>${meeting.recruiter.fullname}</p>
    `;

    await sendMail({
      to: candidateEmail,
      subject: "VieJobs - C·∫≠p nh·∫≠t th√¥ng tin cu·ªôc h·ªçp/ph·ªèng v·∫•n",
      html: htmlForCandidate,
    });

    // G·ª≠i l·∫°i cho c√°c participantEmails n·∫øu c√≥
    const uniqueExtraEmails = (meeting.participantEmails || []).filter(
      (email) => email && email !== candidateEmail
    );

    for (const email of uniqueExtraEmails) {
      const htmlForParticipant = `
        <p>Th√¥ng tin cu·ªôc h·ªçp/ph·ªèng v·∫•n <b>${meeting.title}</b> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.</p>
        <p>Th·ªùi gian m·ªõi: <b>${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</b></p>
        <p>Ph√≤ng h·ªçp tr·ª±c tuy·∫øn: <a href="https://meet.jit.si/${meeting.roomName}">https://meet.jit.si/${meeting.roomName}</a></p>
        <p>Tr√¢n tr·ªçng,<br/>VieJobs</p>
      `;
      await sendMail({
        to: email,
        subject: `[VieJobs] C·∫≠p nh·∫≠t cu·ªôc h·ªçp: ${meeting.title}`,
        html: htmlForParticipant,
      });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", meeting });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t meeting", error: err.message });
  }
};

// Xo√° cu·ªôc h·ªçp
export const deleteMeeting = async (req, res) => {
  try {
    const meeting = await Meeting.findById(req.params.id);

    if (!meeting) {
      return res.status(404).json({ message: "Meeting kh√¥ng t·ªìn t·∫°i" });
    }

    if (meeting.recruiter.toString() !== req.id) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn xo√° meeting n√†y" });
    }

    await Meeting.deleteOne({ _id: meeting._id });
    res.json({ message: "Xo√° meeting th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√° meeting", error: err.message });
  }
};

// G·ª≠i l·∫°i mail m·ªùi h·ªçp cho candidate v√† participantEmails
export const resendInviteMail = async (req, res) => {
  try {
    const { meetingId } = req.body;
    if (!meetingId) {
      return res.status(400).json({ message: "Thi·∫øu meetingId" });
    }
    let meeting = await Meeting.findById(meetingId)
      .populate("recruiter", "fullname email profile.profilePhoto")
      .populate("candidate", "fullname email profile.profilePhoto")
      .populate("job", "title");

    if (!meeting) {
      return res.status(404).json({ message: "Meeting kh√¥ng t·ªìn t·∫°i" });
    }

    // G·ª≠i l·∫°i mail cho candidate
    const candidateEmail = meeting.candidate.email;
    const htmlForCandidate = `
      <p>Xin ch√†o ${meeting.candidate.fullname},</p>
      <p>B·∫°n ƒë∆∞·ª£c m·ªùi tham gia bu·ªïi ph·ªèng v·∫•n cho v·ªã tr√≠ <b>${meeting.job.title}</b>.</p>
      <p><b>Th·ªùi gian:</b> ${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</p>
      <p><b>Ph√≤ng h·ªçp:</b> <a href="https://meet.jit.si/${meeting.roomName}" target="_blank">Tham gia ph√≤ng</a></p>
      <p>Tr√¢n tr·ªçng,<br/>${meeting.recruiter.fullname}</p>
    `;
    await sendMail({
      to: candidateEmail,
      subject: "üéâ L·ªùi m·ªùi ph·ªèng v·∫•n t·ª´ VieJobs",
      html: htmlForCandidate,
    });

    // G·ª≠i l·∫°i cho c√°c participantEmails n·∫øu c√≥
    const uniqueExtraEmails = (meeting.participantEmails || []).filter(
      (email) => email && email !== candidateEmail
    );
    for (const email of uniqueExtraEmails) {
      const htmlForParticipant = `
        <p>B·∫°n ƒë∆∞·ª£c m·ªùi tham gia cu·ªôc h·ªçp/ph·ªèng v·∫•n: <b>${meeting.title}</b></p>
        <p>Th·ªùi gian: <b>${new Date(meeting.scheduledAt).toLocaleString("vi-VN")}</b></p>
        <p>Ph√≤ng h·ªçp tr·ª±c tuy·∫øn: <a href="https://meet.jit.si/${meeting.roomName}">https://meet.jit.si/${meeting.roomName}</a></p>
        <p>Tr√¢n tr·ªçng,<br/>VieJobs</p>
      `;
      await sendMail({
        to: email,
        subject: `[VieJobs] M·ªùi tham gia cu·ªôc h·ªçp: ${meeting.title}`,
        html: htmlForParticipant,
      });
    }

    res.json({ message: "ƒê√£ g·ª≠i l·∫°i mail m·ªùi h·ªçp/ph·ªèng v·∫•n!" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói g·ª≠i l·∫°i mail m·ªùi h·ªçp", error: err.message });
  }
};
